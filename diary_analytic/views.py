# diary_analytic/views.py

from datetime import datetime
from django.shortcuts import render
from django.http import HttpRequest, HttpResponse, JsonResponse 
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .models import Entry, Parameter, EntryValue
from .forms import EntryForm
from .utils import get_diary_dataframe
from .loggers import web_logger, db_logger, predict_logger


# --------------------------------------------------------------------
# üìÖ –ì–ª–∞–≤–Ω–∞—è –≤—å—é—à–∫–∞: –¥–Ω–µ–≤–Ω–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –¥–∞—Ç—É
# --------------------------------------------------------------------

def add_entry(request: HttpRequest) -> HttpResponse:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ –¥–∞—Ç–µ.

    –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
    - ‚è±Ô∏è –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `?date=...`, –ª–∏–±–æ –±–µ—Ä—ë—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é.
    - üîÑ –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç Entry –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
    - üìå –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏ Parameter.
    - üìà –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (EntryValue), –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
    - üìù –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å Entry.
    - üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å: –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    - üñºÔ∏è –ü–µ—Ä–µ–¥–∞—ë—Ç –≤—Å—ë –≤ —à–∞–±–ª–æ–Ω `add_entry.html`.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """

    # ----------------------------------------------------------------
    # üïì 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    # ----------------------------------------------------------------
    today_str = datetime.now().date().isoformat()  # –°—Ç—Ä–æ–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-05-12")
    selected_str = request.GET.get("date", today_str)  # –ï—Å–ª–∏ –Ω–µ—Ç ?date=, —Ç–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è

    try:
        selected_date = datetime.strptime(selected_str, "%Y-%m-%d").date()
        web_logger.debug(f"[add_entry] ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {selected_date}")
    except ValueError:
        selected_date = datetime.now().date()
        web_logger.warning(f"[add_entry] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{selected_str}' ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é: {selected_date}")

    # ----------------------------------------------------------------
    # üßæ 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º Entry –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    # ----------------------------------------------------------------
    entry, created = Entry.objects.get_or_create(date=selected_date)

    if created:
        web_logger.debug(f"[add_entry] üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å Entry –Ω–∞ –¥–∞—Ç—É: {selected_date}")
    else:
        web_logger.debug(f"[add_entry] üìÑ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å Entry –Ω–∞ –¥–∞—Ç—É: {selected_date}")

    # ----------------------------------------------------------------
    # üìù 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    # ----------------------------------------------------------------
    form = EntryForm(instance=entry)
    web_logger.debug(f"[add_entry] üßæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è Entry ({selected_date})")

    # ----------------------------------------------------------------
    # üìå 4. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –±–∞–∑—ã
    # ----------------------------------------------------------------
    parameters = Parameter.objects.filter(is_active=True).order_by("name")
    web_logger.debug(f"[add_entry] üìå –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {parameters.count()}")

    # ----------------------------------------------------------------
    # üìà 5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    # ----------------------------------------------------------------
    entry_values = EntryValue.objects.filter(entry=entry).select_related("parameter")
    values_map = {
        v.parameter.key: v.value
        for v in entry_values
    }
    web_logger.debug(f"[add_entry] üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Entry: {len(values_map)} ‚Äî {values_map}")

    # ----------------------------------------------------------------
    # üí¨ 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    # ----------------------------------------------------------------
    if request.method == "POST":
        web_logger.debug(f"[add_entry] üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞")

        form = EntryForm(request.POST, instance=entry)
        if form.is_valid():
            form.save()
            web_logger.info(f"[add_entry] üíæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è {selected_date}: ¬´{entry.comment[:50]}...¬ª")
        else:
            web_logger.warning(f"[add_entry] ‚ùå –§–æ—Ä–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {form.errors}")

        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ train=1 (–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏)

    # ----------------------------------------------------------------
    # üñºÔ∏è 7. –†–µ–Ω–¥–µ—Ä–∏–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω
    # ----------------------------------------------------------------
    web_logger.debug(f"[add_entry] üì§ –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω add_entry.html")

    return render(request, "diary_analytic/add_entry.html", {
        "form": form,                         # –§–æ—Ä–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        "parameters": parameters,             # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        "values_map": values_map,             # –°–ª–æ–≤–∞—Ä—å: { "toshn": 2.0, "ustalost": 1.0 }
        "selected_date": selected_date,       # –î–∞—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–Ω–µ–≤–Ω–∏–∫
        "today_str": today_str,               # –°—Ç—Ä–æ–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ)
    })


# --------------------------------------------------------------------
# üîò AJAX: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ)
# --------------------------------------------------------------------

@csrf_exempt  # –æ—Ç–∫–ª—é—á–∞–µ–º CSRF (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω—É—é –∑–∞—â–∏—Ç—É —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ JS)
@require_POST  # —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã
def update_value(request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.

    üì• –í—Ö–æ–¥: JSON-–æ–±—ä–µ–∫—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ JS:
        {
            "parameter": "toshn",
            "value": 2,
            "date": "2025-05-12"
        }

    üß† –û–±—Ä–∞–±–æ—Ç–∫–∞:
    - –Ω–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç Entry –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    - –Ω–∞—Ö–æ–¥–∏—Ç Parameter –ø–æ –∫–ª—é—á—É
    - –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç EntryValue
    - –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    üì§ –û—Ç–≤–µ—Ç:
    - {"success": true} ‚Äî –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    - {"error": "..."} ‚Äî –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """

    try:
        # --------------------------
        # üîì 1. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º JSON
        # --------------------------
        data = json.loads(request.body)

        param_key = data.get("parameter")    # –∫–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "ustalost"
        value = data.get("value")            # –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 5
        date_str = data.get("date")          # –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "2025-05-12"

        if not param_key or value is None or not date_str:
            db_logger.warning("‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞")
            return JsonResponse({"error": "missing fields"}, status=400)

        # --------------------------
        # üïì 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
        # --------------------------
        try:
            entry_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            db_logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
            return JsonResponse({"error": "invalid date"}, status=400)

        # --------------------------
        # üìÖ 3. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º Entry –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        # --------------------------
        entry, _ = Entry.objects.get_or_create(date=entry_date)

        # --------------------------
        # üìå 4. –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –∫–ª—é—á—É
        # --------------------------
        try:
            parameter = Parameter.objects.get(key=param_key)
        except Parameter.DoesNotExist:
            db_logger.error(f"‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: '{param_key}'")
            return JsonResponse({"error": "invalid parameter"}, status=400)

        # --------------------------
        # üíæ 5. –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º EntryValue
        # --------------------------
        ev, created = EntryValue.objects.update_or_create(
            entry=entry,
            parameter=parameter,
            defaults={"value": float(value)}
        )

        # --------------------------
        # üìú 6. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # --------------------------
        action = "–°–æ–∑–¥–∞–Ω" if created else "–û–±–Ω–æ–≤–ª—ë–Ω"
        db_logger.info(f"‚úÖ {action} EntryValue: {param_key} = {value} ({entry_date})")

        # --------------------------
        # üì§ 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        # --------------------------
        return JsonResponse({"success": True})

    except Exception as e:
        # üî• –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ ‚Äî –ª–æ–≥ + JSON-–æ—Ç–≤–µ—Ç 500
        db_logger.exception(f"üî• –û—à–∏–±–∫–∞ –≤ update_value: {str(e)}")
        return JsonResponse({"error": "internal error"}, status=500)
    
@require_GET
def predict(request):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.

    üîç GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ?date=2025-05-12

    üì¶ –û—Ç–≤–µ—Ç:
        {
            "ustalost_base": 3.4,
            "toshn_base": 1.2,
            ...
        }

    –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç—Ä–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "base" (–ª–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å).
    """

    try:
        date_str = request.GET.get("date")
        if not date_str:
            return JsonResponse({"error": "missing date"}, status=400)

        try:
            selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            return JsonResponse({"error": "invalid date"}, status=400)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π DataFrame
        df = get_diary_dataframe()

        if df.empty:
            return JsonResponse({}, status=200)  # –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Üí –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
        today_row = get_today_row(selected_date)
        manager = PredictorManager()
        result = {}

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for param in Parameter.objects.filter(is_active=True):
            key = param.key

            if key not in df.columns:
                continue  # –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            exclude = [key]
            try:
                model = manager.train(strategy="base", df=df, target=key, exclude=exclude)
                prediction = manager.predict_today(strategy="base", model=model, today_row=today_row)

                if prediction is not None:
                    result[f"{key}_base"] = round(prediction, 2)

                    predict_logger.debug(
                        f"[predict] ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {key}: {prediction:.2f}"
                    )

            except Exception as e:
                predict_logger.exception(f"[predict] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {key}: {str(e)}")

        return JsonResponse(result)

    except Exception as e:
        predict_logger.exception(f"üî• –û—à–∏–±–∫–∞ –≤ –æ–±—â–µ–π –ª–æ–≥–∏–∫–µ /predict/: {str(e)}")
        return JsonResponse({"error": "internal error"}, status=500)
