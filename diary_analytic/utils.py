# diary_analytic/utils.py

"""
üìä utils.py ‚Äî —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
    - get_diary_dataframe() ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–µ–π Entry, Parameter, EntryValue
      –≤ —à–∏—Ä–æ–∫—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π.
"""

import pandas as pd
from .models import EntryValue


# --------------------------------------------------------------------
# üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame –¥–ª—è ML
# --------------------------------------------------------------------

def get_diary_dataframe() -> pd.DataFrame:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ ¬´—à–∏—Ä–æ–∫–æ–π¬ª —Ç–∞–±–ª–∏—Ü—ã:
        - —Å—Ç—Ä–æ–∫–∏: –¥–∞—Ç—ã (Entry.date)
        - —Å—Ç–æ–ª–±—Ü—ã: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Parameter.key)
        - –∑–Ω–∞—á–µ–Ω–∏—è: –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (EntryValue.value)

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        - –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π (`train`)
        - –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è today_row (`predict_today`)
        - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏

    üì¶ –ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ DataFrame:

        |     date     | toshn | ustalost | trevozhnost |
        |--------------|-------|----------|-------------|
        | 2025-05-10   | 1.0   | 2.0      | 4.0         |
        | 2025-05-11   | 0.0   | NaN      | 3.0         |
        | 2025-05-12   | NaN   | 1.0      | NaN         |

    :return: pd.DataFrame, –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ
    """

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Entry –∏ Parameter
    values = EntryValue.objects.select_related("entry", "parameter")

    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (—É–¥–æ–±–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ DataFrame)
    rows = []
    for val in values:
        rows.append({
            "date": val.entry.date,             # –î–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ = –¥–µ–Ω—å)
            "parameter": val.parameter.key,     # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∫–ª—é—á)
            "value": val.value                  # –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.0 –¥–æ 5.0
        })

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "—É–∑–∫–∏–π" DataFrame
    df = pd.DataFrame(rows)

    if df.empty:
        return pd.DataFrame()  # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ —É–∑–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ "—à–∏—Ä–æ–∫–∏–π":
    # –±—ã–ª–æ: date | parameter | value
    # —Å—Ç–∞–Ω–µ—Ç: date | toshn | ustalost | ...
    df = df.pivot(index="date", columns="parameter", values="value")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    df.sort_index(inplace=True)

    # –ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ø–æ –¢–ó: —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
    # df.fillna(0.0, inplace=True)

    return df
