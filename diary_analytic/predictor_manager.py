# diary_analytic/predictor_manager.py

"""
üß† PredictorManager ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏;
    - –∞–±—Å—Ç—Ä–∞–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: base_model, flags_model –∏ –¥—Ä.;
    - –∏–∑–æ–ª–∏—Ä—É–µ—Ç ML-–ª–æ–≥–∏–∫—É –æ—Ç views –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π Django-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
    - –ª–æ–≥–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏: –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –æ—à–∏–±–∫–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—å—é—Ö–∞—Ö:
    - –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:    manager.predict_today(strategy=..., ...)
    - –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: manager.train(strategy=..., ...)
"""

from diary_analytic.ml_utils import get_model
from .loggers import predict_logger


# -------------------------------------------------------------
# üì¶ –û–±—â–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------------------------------------

class PredictorManager:
    """
    –ö–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤—ã–∑–æ–≤–æ–º –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç.
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ train() –∏–ª–∏ predict_today().
        """
        pass

    # -----------------------------------------------------------------
    # üß™ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    # -----------------------------------------------------------------

    def train(self, strategy: str, df, target: str, exclude: list):
        """
        –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏.

        :param strategy: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'base', 'flags')
        :param df: –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (pivot-—Ç–∞–±–ª–∏—Ü–∞)
        :param target: –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å
        :param exclude: —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—É—â–∏–π target)

        :return: –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (–∏–ª–∏ –æ–±—ä–µ–∫—Ç, –ø—Ä–∏–≥–æ–¥–Ω—ã–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–∑–æ–≤–∞ predict)
        """
        predict_logger.debug(f"üîÅ [train] –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}, Target: {target}, –ò—Å–∫–ª—é—á–µ–Ω–∏—è: {exclude}")

        if strategy == "base":
            return get_model("base").train_model(df, target, exclude=exclude)

        else:
            raise ValueError(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—É—á–µ–Ω–∏—è: {strategy}")

    # -----------------------------------------------------------------
    # üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    # -----------------------------------------------------------------

    def predict_today(self, strategy: str, model, today_row: dict) -> float:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

        :param strategy: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'base')
        :param model: –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–∞—è –∏–∑ train()
        :param today_row: —Å–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º)

        :return: float-–ø—Ä–æ–≥–Ω–æ–∑ (–∏–ª–∏ np.nan/null –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
        """
        predict_logger.debug(f"üì• [predict_today] –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}, –î–∞–Ω–Ω—ã–µ: {today_row}")

        try:
            if strategy == "base":
                return get_model("base").predict(model["model"], model["features"], today_row)

            else:
                raise ValueError(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {strategy}")

        except Exception as e:
            predict_logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ predict_today (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}) ‚Äî {str(e)}")
            return None
