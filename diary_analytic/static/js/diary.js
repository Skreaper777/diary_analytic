document.addEventListener("DOMContentLoaded", async function () {
  console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
  console.log("üì¶ –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±—ç–∫–µ–Ω–¥–∞:", window.VALUES_MAP);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ input
  const dateInput = document.getElementById("date-input");
  const dateValue = dateInput ? dateInput.value : "";
  console.log("üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", dateValue);

  // –í—Å–µ –±–ª–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const parameterBlocks = document.querySelectorAll(".parameter-block");

  parameterBlocks.forEach((block) => {
    const paramKey = block.getAttribute("data-key");
    const buttons = block.querySelectorAll(".value-button");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    console.log(`\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${paramKey}:`);
    console.log(`  üîç –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±—ç–∫–µ–Ω–¥–∞:`, window.VALUES_MAP[paramKey]);
    
    buttons.forEach((btn) => {
      const value = btn.getAttribute("data-value");
      const isSelected = btn.classList.contains("selected");
      console.log(`  - –ö–Ω–æ–ø–∫–∞ ${value}: ${isSelected ? '‚úÖ –≤—ã–±—Ä–∞–Ω–∞' : '‚ùå –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    buttons.forEach((btn) => {
      btn.addEventListener("click", async function () {
        const selectedValue = parseInt(this.getAttribute("data-value"));
        const isAlreadySelected = this.classList.contains("selected");
        // paramKey –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –∏–∑ –±–ª–æ–∫–∞, –∞ –Ω–µ –∏–∑ –∫–Ω–æ–ø–∫–∏!
        const paramKey = block.getAttribute("data-key");

        if (isAlreadySelected) {
          // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ ‚Äî —É–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          const payload = {
            parameter: paramKey,
            value: null,
            date: dateValue,
          };
          console.log("üü° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:", payload);
          try {
            const response = await fetch("/update_value/", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCookie("csrftoken"),
              },
              body: JSON.stringify(payload),
            });
            if (response.ok) {
              console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ${paramKey}`);
              this.classList.remove("selected");
              loadPredictions();
            } else {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${paramKey}`);
            }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
          }
          return;
        }

        // 1. –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        buttons.forEach((b) => b.classList.remove("selected"));
        this.classList.add("selected");

        // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const payload = {
          parameter: paramKey,
          value: selectedValue,
          date: dateValue,
        };
        console.log("üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", payload);
        try {
          const response = await fetch("/update_value/", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-CSRFToken": getCookie("csrftoken"),
            },
            body: JSON.stringify(payload),
          });

          if (response.ok) {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${paramKey} = ${selectedValue}`);
            loadPredictions();
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${paramKey}`);
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
        }
      });
    });
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  parameterBlocks.forEach(block => {
      const key = block.dataset.key;
      const selectedButton = block.querySelector('.value-button.selected');
      console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${key}:`, selectedButton ? `–≤—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${selectedButton.dataset.value}` : '–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è');
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
  loadPredictions();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
  initAllParameterCharts(dateValue);
  setupChartsToggleBtn();
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–æ–≤
  setChartsVisible(loadChartsVisibleState());

  const btn = document.getElementById('retrain-models-btn');
  if (btn) {
    btn.addEventListener('click', async function() {
      btn.disabled = true;
      btn.textContent = '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
      try {
        const res = await fetch('/retrain_models_all/', {
          method: 'POST',
          headers: {
            'X-CSRFToken': getCookie('csrftoken'),
            'Content-Type': 'application/json',
          },
        });
        const data = await res.json();
        if (data.status === 'ok') {
          alert('–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã!');
        } else if (data.status === 'error') {
          // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –Ω–æ –ø–æ–∫–∞ alert
          alert('–ï—Å—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:\n' + (data.details || []).join('\n'));
        } else {
          alert('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (e) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      }
      btn.disabled = false;
      btn.textContent = 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã';
    });
  }

  // –ü—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é)
  if (dateInput) {
    dateInput.addEventListener('change', function() {
      setTimeout(() => {
        // –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è, –Ω–æ –µ—Å–ª–∏ SPA ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
        // initAllParameterCharts(this.value);
      }, 100);
    });
  }

  setupPredictionsToggleBtn();
  setPredictionsVisible(loadPredictionsVisibleState());
});

// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.startsWith(name + "=")) {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}
// üì° –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadPredictions() {
  // üïì 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤ –ø–æ–ª–µ <input type="date">
  const date = document.getElementById("date-input")?.value;
  console.log("[loadPredictions] –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", date);
  if (!date) {
    console.warn("[loadPredictions] –ù–µ—Ç –¥–∞—Ç—ã, –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    return; // –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
  }

  try {
    // üåê 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /get_predictions/?date=...
    console.log(`[loadPredictions] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: /get_predictions/?date=${encodeURIComponent(date)}`);
    const res = await fetch(`/get_predictions/?date=${encodeURIComponent(date)}`);

    // üßæ 3. –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    const data = await res.json();
    console.log("[loadPredictions] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

    // –ü—Ä–∏–º–µ—Ä: data = { "ustalost_base": 3.4, "toshn_base": 1.2 }

    // üîÅ 4. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    Object.entries(data).forEach(([key, value]) => {
      console.log(`[loadPredictions] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–ª—é—á: ${key}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
      // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å "_base" ‚Üí –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: "ustalost")
      const paramKey = key.replace("_base", "");
      console.log(`[loadPredictions] paramKey: ${paramKey}`);

      // üéØ –ò—â–µ–º –±–ª–æ–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
      const target = document.getElementById(`predicted-${paramKey}`);          // –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
      const deltaTarget = document.getElementById(`predicted-delta-${paramKey}`); // –¥–µ–ª—å—Ç–∞

      if (!target) {
        console.warn(`[loadPredictions] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç predicted-${paramKey}`);
      }
      if (!deltaTarget) {
        console.warn(`[loadPredictions] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç predicted-delta-${paramKey}`);
      }

      if (target) {
        // üìå 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const selectedButton = document
          .querySelector(`.parameter-block[data-key="${paramKey}"] .value-button.selected`);
        if (!selectedButton) {
          console.log(`[loadPredictions] –î–ª—è ${paramKey} –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ (–∏–ª–∏ NaN, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)
        const current = parseFloat(selectedButton?.getAttribute("data-value") || "NaN");
        console.log(`[loadPredictions] –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ${paramKey}:`, current);

        // üîÅ 6. –°—á–∏—Ç–∞–µ–º –¥–µ–ª—å—Ç—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        const delta = isNaN(current) ? null : value - current;
        const absDelta = delta !== null ? Math.abs(delta) : null;
        console.log(`[loadPredictions] –ü—Ä–æ–≥–Ω–æ–∑: ${value}, –î–µ–ª—å—Ç–∞: ${delta}, –ê–±—Å. –¥–µ–ª—å—Ç–∞: ${absDelta}`);

        // üì• 7. –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –¥–µ–ª—å—Ç—ã
        target.textContent = `–ü—Ä–æ–≥–Ω–æ–∑: ${value.toFixed(1)}`;
        if (deltaTarget) {
          deltaTarget.textContent = delta !== null ? `Œî ${delta.toFixed(1)}` : "";
        }

        // üé® 8. –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        let color = "gray";
        if (absDelta !== null) {
          if (absDelta < 1) color = "green";
          else if (absDelta <= 2) color = "yellow";
          else color = "red";
        }
        console.log(`[loadPredictions] –¶–≤–µ—Ç –¥–ª—è ${paramKey}:`, color);

        // üü¢ 9. –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞–∫ data-–∞—Ç—Ä–∏–±—É—Ç (–¥–ª—è CSS-—Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏)
        target.dataset.color = color;
      }
    });

    // ‚úÖ –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å: —É—Å–ø–µ—Ö
    console.log("[loadPredictions] –ü—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:", data);

  } catch (err) {
    // ‚ùå –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error("[loadPredictions] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", err);
  }
}

// --- –ì—Ä–∞—Ñ–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
async function loadParameterHistory(paramKey, dateStr) {
  const chartId = `history-chart-${paramKey}`;
  const emptyId = `history-chart-empty-${paramKey}`;
  const ctx = document.getElementById(chartId);
  const emptyDiv = document.getElementById(emptyId);
  if (!ctx) return;

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (ctx._chartInstance) {
    ctx._chartInstance.destroy();
    ctx._chartInstance = null;
  }

  try {
    const res = await fetch(`/api/parameter_history/?param=${encodeURIComponent(paramKey)}&date=${encodeURIComponent(dateStr)}`);
    const data = await res.json();
    if (!data.dates || !data.values || data.dates.length === 0) {
      ctx.style.display = 'none';
      if (emptyDiv) emptyDiv.style.display = '';
      return;
    }
    ctx.style.display = '';
    if (emptyDiv) emptyDiv.style.display = 'none';

    // –û–¥–∏–Ω dataset, —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏ –º–µ–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ segment.borderColor
    const monthsRu = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    const labels = data.dates.map(d => {
      const [y, m, d2] = d.split('-');
      return `${parseInt(d2,10)} ${monthsRu[parseInt(m,10)-1]}`;
    });
    ctx._chartInstance = new window.Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          label: '',
          data: data.values,
          borderColor: '#28a745', // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          backgroundColor: 'rgba(40,167,69,0.10)',
          pointRadius: 2.5,
          pointBackgroundColor: '#28a745',
          pointBorderColor: '#222',
          borderWidth: 2,
          tension: 0.25,
          fill: true,
          spanGaps: true,
          segment: {
            borderColor: ctx => {
              const v = ctx.p0.parsed.y;
              return v >= 3 ? '#e0a800' : '#28a745';
            },
            backgroundColor: ctx => {
              const v = ctx.p0.parsed.y;
              return v >= 3 ? 'rgba(224,168,0,0.10)' : 'rgba(40,167,69,0.10)';
            }
          }
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: true }
        },
        scales: {
          x: {
            ticks: { color: '#aaa', font: { size: 11 } },
            grid: { color: '#222' }
          },
          y: {
            min: 0, max: 5,
            ticks: { color: '#aaa', font: { size: 11 }, stepSize: 1 },
            grid: { color: '#222' }
          }
        }
      }
    });
  } catch (e) {
    ctx.style.display = 'none';
    if (emptyDiv) emptyDiv.style.display = '';
  }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
function initAllParameterCharts(dateStr) {
  document.querySelectorAll('.parameter-block').forEach(block => {
    const paramKey = block.getAttribute('data-key');
    loadParameterHistory(paramKey, dateStr);
  });
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
function setChartsVisible(visible) {
  document.querySelectorAll('.history-chart-block').forEach(block => {
    block.style.display = visible ? '' : 'none';
  });
  const btn = document.getElementById('charts-toggle-btn');
  if (btn) btn.classList.toggle('active', visible);
}

function saveChartsVisibleState(visible) {
  localStorage.setItem('diary_charts_visible', visible ? '1' : '0');
}

function loadChartsVisibleState() {
  const val = localStorage.getItem('diary_charts_visible');
  if (val === null) return true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã
  return val === '1';
}

function setupChartsToggleBtn() {
  const btn = document.getElementById('charts-toggle-btn');
  if (!btn) return;
  btn.addEventListener('click', function() {
    const nowVisible = !loadChartsVisibleState();
    setChartsVisible(nowVisible);
    saveChartsVisibleState(nowVisible);
  });
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ---
function setPredictionsVisible(visible) {
  document.querySelectorAll('.prediction-wrapper').forEach(block => {
    block.style.display = visible ? '' : 'none';
  });
  const btn = document.getElementById('predictions-toggle-btn');
  if (btn) btn.classList.toggle('active', visible);
}

function savePredictionsVisibleState(visible) {
  localStorage.setItem('diary_predictions_visible', visible ? '1' : '0');
}

function loadPredictionsVisibleState() {
  const val = localStorage.getItem('diary_predictions_visible');
  if (val === null) return true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≥–Ω–æ–∑—ã –≤–∫–ª—é—á–µ–Ω—ã
  return val === '1';
}

function setupPredictionsToggleBtn() {
  const btn = document.getElementById('predictions-toggle-btn');
  if (!btn) return;
  btn.addEventListener('click', function() {
    const nowVisible = !loadPredictionsVisibleState();
    setPredictionsVisible(nowVisible);
    savePredictionsVisibleState(nowVisible);
  });
}
