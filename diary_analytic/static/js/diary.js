document.addEventListener("DOMContentLoaded", function () {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ input
    const dateInput = document.getElementById("date-input");
    const dateValue = dateInput ? dateInput.value : "";
    console.log("üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", dateValue);
  
    // –í—Å–µ –±–ª–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const parameterBlocks = document.querySelectorAll(".parameter-block");
  
    parameterBlocks.forEach((block) => {
      const paramKey = block.getAttribute("data-key");
      const buttons = block.querySelectorAll(".value-button");
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
      console.log(`\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${paramKey}:`);
      buttons.forEach((btn) => {
        const value = btn.getAttribute("data-value");
        const isSelected = btn.classList.contains("selected");
        console.log(`  - –ö–Ω–æ–ø–∫–∞ ${value}: ${isSelected ? '‚úÖ –≤—ã–±—Ä–∞–Ω–∞' : '‚ùå –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      buttons.forEach((btn) => {
        btn.addEventListener("click", async function () {
          const selectedValue = parseInt(this.getAttribute("data-value"));
  
          // 1. –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
          buttons.forEach((b) => b.classList.remove("selected"));
          this.classList.add("selected");
  
          // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          try {
            const response = await fetch("/update_value/", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCookie("csrftoken"),
              },
              body: JSON.stringify({
                parameter: paramKey,
                value: selectedValue,
                date: dateValue,
              }),
            });
  
            if (response.ok) {
              console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${paramKey} = ${selectedValue}`);
            } else {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${paramKey}`);
            }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
          }
        });
      });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    parameterBlocks.forEach(block => {
        const key = block.dataset.key;
        const selectedButton = block.querySelector('.value-button.selected');
        console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${key}:`, selectedButton ? `–≤—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${selectedButton.dataset.value}` : '–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è');
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    loadPredictions();
  });
  
  // üîê –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== "") {
      const cookies = document.cookie.split(";");
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.startsWith(name + "=")) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }
  // üì° –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadPredictions() {
    // üïì 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤ –ø–æ–ª–µ <input type="date">
    const date = document.getElementById("date-input")?.value;
    if (!date) return; // –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
  
    try {
      // üåê 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /predict/?date=...
      const res = await fetch(`/predict/?date=${encodeURIComponent(date)}`);
  
      // üßæ 3. –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
      const data = await res.json();
  
      // –ü—Ä–∏–º–µ—Ä: data = { "ustalost_base": 3.4, "toshn_base": 1.2 }
  
      // üîÅ 4. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      Object.entries(data).forEach(([key, value]) => {
        // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å "_base" ‚Üí –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: "ustalost")
        const paramKey = key.replace("_base", "");
  
        // üéØ –ò—â–µ–º –±–ª–æ–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        const target = document.getElementById(`predicted-${paramKey}`);          // –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        const deltaTarget = document.getElementById(`predicted-delta-${paramKey}`); // –¥–µ–ª—å—Ç–∞
  
        if (target) {
          // üìå 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const selectedButton = document
            .querySelector(`.parameter-block[data-key="${paramKey}"] .value-button.selected`);
  
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ (–∏–ª–∏ NaN, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)
          const current = parseFloat(selectedButton?.getAttribute("data-value") || "NaN");
  
          // üîÅ 6. –°—á–∏—Ç–∞–µ–º –¥–µ–ª—å—Ç—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
          const delta = isNaN(current) ? null : value - current;
          const absDelta = delta !== null ? Math.abs(delta) : null;
  
          // üì• 7. –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –¥–µ–ª—å—Ç—ã
          target.textContent = `–ü—Ä–æ–≥–Ω–æ–∑: ${value.toFixed(1)}`;
          deltaTarget.textContent = delta !== null ? `Œî ${delta.toFixed(1)}` : "";
  
          // üé® 8. –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
          let color = "gray";
          if (absDelta !== null) {
            if (absDelta < 1) color = "green";
            else if (absDelta <= 2) color = "yellow";
            else color = "red";
          }
  
          // üü¢ 9. –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞–∫ data-–∞—Ç—Ä–∏–±—É—Ç (–¥–ª—è CSS-—Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏)
          target.dataset.color = color;
        }
      });
  
      // ‚úÖ –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å: —É—Å–ø–µ—Ö
      console.log("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data);
  
    } catch (err) {
      // ‚ùå –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", err);
    }
  }
  