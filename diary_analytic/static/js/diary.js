document.addEventListener("DOMContentLoaded", async function () {
  console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
  console.log("üì¶ –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±—ç–∫–µ–Ω–¥–∞:", window.VALUES_MAP);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ input
  const dateInput = document.getElementById("date-input");
  const dateValue = dateInput ? dateInput.value : "";
  console.log("üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", dateValue);

  // –í—Å–µ –±–ª–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const parameterBlocks = document.querySelectorAll(".parameter-block");

  parameterBlocks.forEach((block) => {
    const paramKey = block.getAttribute("data-key");
    const buttons = block.querySelectorAll(".value-button");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    console.log(`\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${paramKey}:`);
    console.log(`  üîç –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±—ç–∫–µ–Ω–¥–∞:`, window.VALUES_MAP[paramKey]);
    
    buttons.forEach((btn) => {
      const value = btn.getAttribute("data-value");
      const isSelected = btn.classList.contains("selected");
      console.log(`  - –ö–Ω–æ–ø–∫–∞ ${value}: ${isSelected ? '‚úÖ –≤—ã–±—Ä–∞–Ω–∞' : '‚ùå –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    buttons.forEach((btn) => {
      btn.addEventListener("click", async function () {
        const selectedValue = parseInt(this.getAttribute("data-value"));
        const isAlreadySelected = this.classList.contains("selected");
        // paramKey –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –∏–∑ –±–ª–æ–∫–∞, –∞ –Ω–µ –∏–∑ –∫–Ω–æ–ø–∫–∏!
        const paramKey = block.getAttribute("data-key");

        if (isAlreadySelected) {
          // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ ‚Äî —É–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          const payload = {
            parameter: paramKey,
            value: null,
            date: dateValue,
          };
          console.log("üü° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:", payload);
          try {
            const response = await fetch("/update_value/", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCookie("csrftoken"),
              },
              body: JSON.stringify(payload),
            });
            if (response.ok) {
              console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ${paramKey}`);
              this.classList.remove("selected");
              loadPredictions();
            } else {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${paramKey}`);
            }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
          }
          return;
        }

        // 1. –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        buttons.forEach((b) => b.classList.remove("selected"));
        this.classList.add("selected");

        // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const payload = {
          parameter: paramKey,
          value: selectedValue,
          date: dateValue,
        };
        console.log("üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", payload);
        try {
          const response = await fetch("/update_value/", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-CSRFToken": getCookie("csrftoken"),
            },
            body: JSON.stringify(payload),
          });

          if (response.ok) {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${paramKey} = ${selectedValue}`);
            loadPredictions();
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${paramKey}`);
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
        }
      });
    });
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  parameterBlocks.forEach(block => {
      const key = block.dataset.key;
      const selectedButton = block.querySelector('.value-button.selected');
      console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${key}:`, selectedButton ? `–≤—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${selectedButton.dataset.value}` : '–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è');
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
  loadPredictions();

  // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  console.log("[predict] üì¶ –°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ—Å–ª–µ DOMContentLoaded");
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–ª–∏ –±–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
  const date = document.getElementById("date-input")?.value || new Date().toISOString().slice(0, 10);
  console.log("[predict] üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", date);

  try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
      const res = await fetch(`/get_predictions/?date=${date}`);
      console.log("[predict] üì° –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ /get_predictions/");
      const preds = await res.json();
      console.log("[predict] üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:", preds);

      // –û–±—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: toshn_base, mood_flags
      for (const [key, value] of Object.entries(preds)) {
          const [param, strategy] = key.split("_");
          console.log(`[predict] üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑: ${param}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ${strategy}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);

          const selector = `[data-param='${param}']`;
          const el = document.querySelector(selector);

          if (el) {
              // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –±–ª–æ–∫ .prediction
              let block = el.querySelector(".prediction");
              if (!block) {
                  block = document.createElement("div");
                  block.className = "prediction";
                  el.appendChild(block);
                  console.log(`[predict] ‚ûï –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ .prediction –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ${param}`);
              }

              // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
              block.innerHTML += `<div><small>üîÆ ${strategy}: <b>${value ?? "‚Äî"}</b></small></div>`;
              console.log(`[predict] ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–±–∞–≤–ª–µ–Ω: ${strategy}: ${value}`);
          } else {
              console.warn(`[predict] ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å data-param='${param}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
      }
  } catch (err) {
      console.error("[predict] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:", err);
  }

  const btn = document.getElementById('retrain-models-btn');
  if (btn) {
    btn.addEventListener('click', async function() {
      btn.disabled = true;
      btn.textContent = '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
      try {
        const res = await fetch('/retrain_models_all/', {
          method: 'POST',
          headers: {
            'X-CSRFToken': getCookie('csrftoken'),
            'Content-Type': 'application/json',
          },
        });
        if (res.ok) {
          alert('–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã!');
        } else {
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π');
        }
      } catch (e) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      }
      btn.disabled = false;
      btn.textContent = 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã';
    });
  }
});

// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.startsWith(name + "=")) {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}
// üì° –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadPredictions() {
  // üïì 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤ –ø–æ–ª–µ <input type="date">
  const date = document.getElementById("date-input")?.value;
  if (!date) return; // –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º

  try {
    // üåê 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /predict/?date=...
    const res = await fetch(`/predict/?date=${encodeURIComponent(date)}`);

    // üßæ 3. –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    const data = await res.json();

    // –ü—Ä–∏–º–µ—Ä: data = { "ustalost_base": 3.4, "toshn_base": 1.2 }

    // üîÅ 4. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    Object.entries(data).forEach(([key, value]) => {
      // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å "_base" ‚Üí –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: "ustalost")
      const paramKey = key.replace("_base", "");

      // üéØ –ò—â–µ–º –±–ª–æ–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
      const target = document.getElementById(`predicted-${paramKey}`);          // –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
      const deltaTarget = document.getElementById(`predicted-delta-${paramKey}`); // –¥–µ–ª—å—Ç–∞

      if (target) {
        // üìå 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const selectedButton = document
          .querySelector(`.parameter-block[data-key="${paramKey}"] .value-button.selected`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ (–∏–ª–∏ NaN, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)
        const current = parseFloat(selectedButton?.getAttribute("data-value") || "NaN");

        // üîÅ 6. –°—á–∏—Ç–∞–µ–º –¥–µ–ª—å—Ç—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        const delta = isNaN(current) ? null : value - current;
        const absDelta = delta !== null ? Math.abs(delta) : null;

        // üì• 7. –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –¥–µ–ª—å—Ç—ã
        target.textContent = `–ü—Ä–æ–≥–Ω–æ–∑: ${value.toFixed(1)}`;
        deltaTarget.textContent = delta !== null ? `Œî ${delta.toFixed(1)}` : "";

        // üé® 8. –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        let color = "gray";
        if (absDelta !== null) {
          if (absDelta < 1) color = "green";
          else if (absDelta <= 2) color = "yellow";
          else color = "red";
        }

        // üü¢ 9. –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞–∫ data-–∞—Ç—Ä–∏–±—É—Ç (–¥–ª—è CSS-—Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏)
        target.dataset.color = color;
      }
    });

    // ‚úÖ –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å: —É—Å–ø–µ—Ö
    console.log("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data);

  } catch (err) {
    // ‚ùå –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", err);
  }
}
