"""
üß† ml_utils.py ‚Äî –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

–°–æ–¥–µ—Ä–∂–∏—Ç:
    - base_model: –ø—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    - flags_model: –º–æ–¥–µ–ª—å —Å —Ñ–ª–∞–≥–∞–º–∏ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from .loggers import predict_logger


# --------------------------------------------------------------------
# üìä base_model ‚Äî –ø—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å
# --------------------------------------------------------------------

class base_model:
    @staticmethod
    def train_model(df, target: str, *, exclude=None):
        """
        –û–±—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –ª–∏–Ω–µ–π–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è target.

        :param df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        :param target: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        :param exclude: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π)
        :return: –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        """
        if exclude is None:
            exclude = []
        # –£–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        features = [col for col in df.columns if col not in exclude]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        X = df[features].fillna(0).values
        y = df[target].fillna(0).values
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = LinearRegression()
        model.fit(X, y)
        
        predict_logger.debug(f"‚úÖ –û–±—É—á–µ–Ω–∞ base_model –¥–ª—è {target}")
        return {"model": model, "features": features}

    @staticmethod
    def predict(model, features, today_row: dict) -> float:
        """
        –î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.

        :param model: –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        :param features: —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
        :param today_row: —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        :return: –ø—Ä–æ–≥–Ω–æ–∑ (float)
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        import pandas as pd
        X = pd.DataFrame([{f: today_row.get(f, 0.0) for f in features}])
        prediction = model.predict(X)[0]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0, 5]
        return max(0.0, min(5.0, prediction))


# --------------------------------------------------------------------
# üö© flags_model ‚Äî –º–æ–¥–µ–ª—å —Å —Ñ–ª–∞–≥–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)
# --------------------------------------------------------------------

class flags_model:
    @staticmethod
    def train_model(df, target: str, *, exclude=None):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {"model": None, "features": []}

    @staticmethod
    def predict(model, features, today_row: dict) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
        raise NotImplementedError("üöß flags_model –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


# –Ø–≤–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã
__all__ = ['base_model', 'flags_model'] 